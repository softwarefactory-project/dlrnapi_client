# coding: utf-8

"""
    DLRN API

    DLRN API client

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

from collections import namedtuple
import os
import sys
import mock
import unittest

import dlrnapi_client.shell as shell
import dlrnapi_client.api_client as api_client


def mocked_get(*args, **kwargs):
    response = namedtuple("response", "data")
    return response(data="test")


def mocked_auth_header(*args, **kwargs):
    return {"type": "kerberos", "in": "header", "key": "Authorization",
            "value": "value"}


class TestShell(unittest.TestCase):
    """Promotion unit test stubs """

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def format_buffer_output(self, input):
        return str(input).replace('\n', '').replace('\"', '')

    def testNoArgs(self):
        """Test case for default basicAuth """
        devnull = open(os.devnull, 'w')
        with mock.patch('sys.stderr', devnull):
            with self.assertRaises(SystemExit):
                shell.main()
        devnull.close()

    def test_missing_method(self):
        testargs = ["dlrnapi", "--url", "testURL", "missing-method"]
        devnull = open(os.devnull, 'w')
        with mock.patch('sys.stderr', devnull):
            with mock.patch.object(sys, 'argv', testargs):
                with self.assertRaises(SystemExit):
                    shell.main()
        devnull.close()

    @mock.patch("dlrnapi_client.ApiClient")
    @mock.patch("dlrnapi_client.DefaultApi.api_last_tested_repo_get")
    def testDefaultAuth(self, repo_get, api_client):
        repo_get.return_value = "repo"
        testargs = ["dlrnapi", "--url", "testURL", "repo-get"]
        with mock.patch.object(sys, 'argv', testargs):
            shell.main()
        auth_method = api_client.call_args[1]['auth_method']
        self.assertEqual(auth_method, "basicAuth")

    @mock.patch("dlrnapi_client.ApiClient")
    @mock.patch("dlrnapi_client.DefaultApi.api_last_tested_repo_get")
    def test_kerb_auth(self, repo_get, api_client):
        repo_get.return_value = "repo"
        testargs = ["dlrnapi", "--url", "testURL", "--auth-method",
                    "kerberosAuth", "--server-principal",
                    "serverPrinc", "repo-get"]
        with mock.patch.object(sys, 'argv', testargs):
            shell.main()

        auth_method = api_client.call_args[1]['auth_method']
        self.assertEqual(auth_method, "kerberosAuth")

    @mock.patch("dlrnapi_client.DefaultApi.api_last_tested_repo_get")
    def test_kerb_auth_no_server_principal(self, repo_get):
        testargs = ["dlrnapi", "--url", "testURL", "--auth-method",
                    "kerberosAuth", "repo-get"]
        with mock.patch.object(sys, 'argv', testargs):
            with self.assertRaises(Exception) as context:
                shell.main()
        self.assertEqual(str(context.exception), "ERROR: server-principal"
                         " argument mandatory with kerberosAuth method.")

    def test_kerb_auth_no_gssapi_module(self):
        import dlrnapi_client.configuration as config
        with self.assertRaises(Exception) as context:
            config.gssapi = None
            config.get_kerberos_auth_token()
        self.assertEqual(str(context.exception), "Kerberos auth not enabled"
                         " due to missing gssapi dependency")

    @mock.patch("dlrnapi_client.configuration.auth_settings",
                side_effect=mocked_auth_header)
    @mock.patch("dlrnapi_client.ApiClient.request", side_effect=mocked_get)
    def test_send_auth_get_force_method(self, call_api, mock_auth):
        testargs = ["dlrnapi", "--url", "testURL", "--auth-method",
                    "kerberosAuth", "--force-auth", "--server-principal",
                    "serverPrinc", "repo-get"]
        with mock.patch.object(sys, 'argv', testargs):
            shell.main()
        auth_method = mock_auth.call_args[0][0]
        self.assertEqual(auth_method, "kerberosAuth")

    @mock.patch("dlrnapi_client.configuration.auth_settings")
    @mock.patch("dlrnapi_client.ApiClient.request", side_effect=mocked_get)
    def test_send_auth_get_non_force_method(self, call_api, mock_auth):
        testargs = ["dlrnapi", "--url", "testURL", "--auth-method",
                    "kerberosAuth", "--server-principal", "serverPrinc",
                    "repo-get"]
        with mock.patch.object(sys, 'argv', testargs):
            shell.main()
        self.assertEqual(mock_auth.called, False)

    @mock.patch("dlrnapi_client.configuration.auth_settings")
    def test_send_auth_get_force_method_not_allowed(self, mock_auth):
        client = api_client.ApiClient()
        client.force_auth = True
        client.auth_method = ["basicAuth"]
        with self.assertRaises(Exception) as cm:
            client.update_params_for_auth(None, None, ["kerberosAuth"])
        self.assertEqual(str(cm.exception), "Authentication method not"
                         " allowed for requested endpoint.")
        self.assertEqual(mock_auth.called, False)


if __name__ == '__main__':
    unittest.main()
